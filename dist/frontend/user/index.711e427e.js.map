{"mappings":"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","sources":["src/frontend/user/user.tsx","src/backend/endpoints/user/sessionApi.ts","src/frontend/utilities/session.ts","src/frontend/utilities/exceptionToError.ts","src/backend/cTypes/emailCType.ts","src/backend/utilities/supportedCTypes.ts","src/backend/cTypes/twitterCType.ts","src/backend/cTypes/idCType.ts"],"sourcesContent":["import { createRoot } from 'react-dom/client';\n\nimport { FormEvent, useCallback, useEffect, useState } from 'react';\nimport {\n  BrowserRouter,\n  generatePath,\n  Link,\n  Route,\n  Routes,\n  useParams,\n} from 'react-router-dom';\n\nimport ky from 'ky';\nimport { IClaimContents, IEncryptedMessage } from '@kiltprotocol/sdk-js';\n\nimport {\n  apiWindow,\n  getCompatibleExtensions,\n  getSession,\n  Session,\n} from '../utilities/session';\nimport { exceptionToError } from '../utilities/exceptionToError';\nimport { paths } from '../utilities/paths';\n\nimport {\n  kiltCost,\n  supportedCTypes,\n  supportedCTypeKeys,\n  isSupportedCType,\n} from '../../backend/utilities/supportedCTypes';\nimport { paths as apiPaths } from '../../backend/endpoints/paths';\nimport { sessionHeader } from '../../backend/endpoints/user/sessionHeader';\n\ndeclare global {\n  // eslint-disable-next-line @typescript-eslint/no-namespace\n  namespace React.JSX {\n    interface IntrinsicElements {\n      'mati-button': React.DetailedHTMLProps<\n        React.HTMLAttributes<HTMLElement> & any,\n        HTMLElement\n      >;\n    }\n  }\n}\n\ntype FlowError = 'closed' | 'unauthorized' | 'unknown';\n\nconst errors: Record<FlowError, JSX.Element> = {\n  closed: <p>Your wallet was closed. Please try again.</p>,\n  unauthorized: (\n    <p>\n      The authorization was rejected. Follow the instructions on our Tech\n      Support site to establish the connection between this attester and your\n      wallet.\n      <a\n        href=\"https://support.kilt.io/support/solutions/articles/80000968082-how-to-grant-access-to-website\"\n        target=\"_blank\"\n        rel=\"noreferrer\"\n      >\n        Tech Support\n      </a>\n    </p>\n  ),\n  unknown: (\n    <p>\n      Something went wrong! Try again or reload the page or restart your\n      browser.\n    </p>\n  ),\n};\n\nfunction Connect({ onConnect }: { onConnect: (s: Session) => void }) {\n  const { kilt } = apiWindow;\n\n  const [extensions, setExtensions] = useState(getCompatibleExtensions());\n\n  const [processing, setProcessing] = useState(false);\n  const [error, setError] = useState<FlowError>();\n\n  useEffect(() => {\n    function handler() {\n      setExtensions(getCompatibleExtensions());\n    }\n\n    window.dispatchEvent(new CustomEvent('kilt-dapp#initialized'));\n    window.addEventListener('kilt-extension#initialized', handler);\n    return () =>\n      window.removeEventListener('kilt-extension#initialized', handler);\n  }, []);\n\n  const handleConnect = useCallback(\n    async (extension: string) => {\n      try {\n        setProcessing(true);\n        setError(undefined);\n\n        onConnect(await getSession(kilt[extension]));\n      } catch (exception) {\n        const { message } = exceptionToError(exception);\n        if (message.includes('closed')) {\n          setError('closed');\n        } else if (message.includes('Not authorized')) {\n          setError('unauthorized');\n        } else {\n          setError('unknown');\n          console.error(exception);\n        }\n        setProcessing(false);\n      }\n    },\n    [onConnect, kilt],\n  );\n  return (\n    <section>\n      {extensions.length === 0 && (\n        <p>\n          Looking for a wallet… To make a claim you need to have e.g. Sporran\n          wallet installed and have an identity configured in it.\n        </p>\n      )}\n\n      {extensions.map((extension) => (\n        <button\n          className=\"btn btn-active btn-primary\"\n          key={extension}\n          type=\"button\"\n          onClick={() => handleConnect(extension)}\n        >\n          Connect to {kilt[extension].name}\n        </button>\n      ))}\n\n      {processing && <p>Connecting…</p>}\n\n      {error && errors[error]}\n    </section>\n  );\n}\n\nfunction Claim() {\n  const { type } = useParams();\n\n  const [flowId, setFlowId] = useState();\n  const [session, setSession] = useState<Session>();\n\n  const [status, setStatus] = useState<'start' | 'requested' | 'paid'>('start');\n\n  const [error, setError] = useState<FlowError>();\n\n  useEffect(() => {\n    setTimeout(() => {\n      const button: any = document.querySelector('mati-button');\n\n      button?.addEventListener('mati:userStartedSdk', () => {\n        setFlowId(button.__flowId);\n      });\n    }, 1000 * 3);\n  }, []);\n\n  const handleConnect = useCallback((session: Session) => {\n    setSession(session);\n  }, []);\n\n  const handleClaim = useCallback(\n    async (event: FormEvent<HTMLFormElement>) => {\n      event.preventDefault();\n      setError(undefined);\n\n      if (!session || !type || !isSupportedCType(type)) {\n        return;\n      }\n\n      const claimContents = Object.fromEntries(\n        new FormData(event.currentTarget).entries(),\n      ) as IClaimContents;\n\n      try {\n        const { sessionId } = session;\n        const headers = { [sessionHeader]: sessionId };\n        // define in advance how to handle the response from the extension\n        await session.listen(async (message) => {\n          await ky.post(apiPaths.requestAttestation, {\n            headers,\n            json: message,\n          });\n          setStatus('requested');\n        });\n\n        // encrypt submit-terms message on the backend\n        const message: IEncryptedMessage = await ky\n          .post(apiPaths.terms, {\n            headers,\n            json: { type, claimContents },\n          })\n          .json();\n\n        // forward the encrypted message to the extension\n        await session.send(message);\n      } catch (exception) {\n        const { message } = exceptionToError(exception);\n        if (message.includes('closed') || message.includes('Conflict')) {\n          setError('closed');\n        } else if (message.includes('Not authorized')) {\n          setError('unauthorized');\n        } else {\n          setError('unknown');\n          console.error(exception);\n        }\n      }\n    },\n    [session, type],\n  );\n\n  // implement your preferred payment service\n  const handlePayment = useCallback(\n    async (event: FormEvent<HTMLFormElement>) => {\n      event.preventDefault();\n      setError(undefined);\n\n      if (!session) {\n        return;\n      }\n\n      try {\n        const { sessionId } = session;\n        const headers = { [sessionHeader]: sessionId };\n        await ky.post(apiPaths.pay, { headers });\n        setStatus('paid');\n      } catch (error) {\n        console.error(error);\n        setError('unknown');\n      }\n    },\n    [session],\n  );\n\n  if (!type || !isSupportedCType(type)) {\n    return <p>Error - Unsupported CType</p>;\n  }\n\n  const cType = supportedCTypes[type];\n  const { title, properties } = cType;\n\n  console.log('ASD', flowId);\n  return (\n    <section>\n      <h2>{title}</h2>\n      <p className=\"mb-4\">Price: {kiltCost[type]} KILT</p>\n\n      {status === 'start' && type === 'id' && (\n        // implement custom claim forms if you want to handle non-string properties\n        <>\n          <mati-button\n            clientid=\"64811ce44d683b001b9013f0\"\n            flowId=\"64811ce44d683b001b9013ef\"\n          />\n          <form className=\"my-2\" onSubmit={handleClaim}>\n            {Object.keys(properties).map((property) => (\n              <label className=\"hidden\" key={property}>\n                {property}:\n                <input name={property} disabled={!session} required />\n              </label>\n            ))}\n\n            {!session && <Connect onConnect={handleConnect} />}\n\n            {session && (\n              <button className=\"btn btn-active btn-primary\" type=\"submit\">\n                Submit\n              </button>\n            )}\n          </form>\n        </>\n      )}\n\n      {status === 'start' && type !== 'id' && (\n        // implement custom claim forms if you want to handle non-string properties\n        <>\n          <form onSubmit={handleClaim}>\n            {Object.keys(properties).map((property) => (\n              <label key={property}>\n                {property}:\n                <input name={property} disabled={!session} required />\n              </label>\n            ))}\n\n            {!session && <Connect onConnect={handleConnect} />}\n\n            {session && (\n              <button className=\"btn btn-active btn-primary\" type=\"submit\">\n                Submit\n              </button>\n            )}\n          </form>\n        </>\n      )}\n\n      {status === 'requested' && (\n        <form onSubmit={handlePayment}>\n          <p>Thanks for your request. Please pay</p>\n          <button>Pay</button>\n        </form>\n      )}\n\n      {status === 'paid' && (\n        <p>\n          Thanks for your payment! Your request has been sent to the attester\n          for processing. You can check the attestation status in your wallet.\n        </p>\n      )}\n\n      {error && errors[error]}\n\n      <Link to={paths.home}>Back</Link>\n    </section>\n  );\n}\n\nfunction Home() {\n  return (\n    <section>\n      <h1 className=\"my-4\">CertifiedProof</h1>\n\n      <p>\n        This KILT Attester Example demonstrates how to issue credentials for a\n        couple basic claim types which already exist on the KILT blockchain. The\n        user chooses a claim type, enters the claim data, makes a (mock)\n        payment, and the claim is sent to the attester to be reviewed.\n      </p>\n\n      <h2>Choose your claim type:</h2>\n\n      <ul className=\"flex flex-col gap-2 my-4\">\n        {supportedCTypeKeys.map((type) => (\n          <li key={type}>\n            <Link\n              className=\"link link-primary\"\n              to={generatePath(paths.claim, { type })}\n            >\n              {supportedCTypes[type].title}\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </section>\n  );\n}\n\nconst root = createRoot(document.querySelector('#app') as HTMLElement);\nroot.render(\n  <BrowserRouter>\n    <Routes>\n      <Route path={paths.home} element={<Home />} />\n      <Route path={paths.claim} element={<Claim />} />\n\n      <Route path=\"*\" element={<p>404 - Not found</p>} />\n    </Routes>\n  </BrowserRouter>,\n);\n","import ky from 'ky';\n\nimport { CheckSessionInput, GetSessionOutput } from './session';\nimport { paths } from '../paths';\nimport { sessionHeader } from './sessionHeader';\n\nexport async function getSessionValues(): Promise<GetSessionOutput> {\n  return ky.get(paths.session).json();\n}\n\nexport async function checkSession(\n  json: CheckSessionInput,\n  sessionId: string,\n): Promise<void> {\n  const headers = { [sessionHeader]: sessionId };\n  await ky.post(paths.session, { json, headers });\n}\n","import type { DidResourceUri, IEncryptedMessage } from '@kiltprotocol/sdk-js';\n\nimport {\n  checkSession,\n  getSessionValues,\n} from '../../backend/endpoints/user/sessionApi';\n\ninterface PubSubSession {\n  listen: (\n    callback: (message: IEncryptedMessage) => Promise<void>,\n  ) => Promise<void>;\n  close: () => Promise<void>;\n  send: (message: IEncryptedMessage) => Promise<void>;\n  encryptionKeyUri: DidResourceUri;\n  encryptedChallenge: string;\n  nonce: string;\n}\n\ninterface InjectedWindowProvider {\n  startSession: (\n    dAppName: string,\n    dAppEncryptionKeyUri: DidResourceUri,\n    challenge: string,\n  ) => Promise<PubSubSession>;\n  name: string;\n  version: string;\n  specVersion: '3.0';\n}\n\nexport const apiWindow = window as unknown as {\n  kilt: Record<string, InjectedWindowProvider>;\n};\n\nexport function getCompatibleExtensions(): Array<string> {\n  return Object.entries(apiWindow.kilt)\n    .filter(([, provider]) => provider.specVersion.startsWith('3.'))\n    .map(([name]) => name);\n}\n\nexport type Session = PubSubSession & {\n  sessionId: string;\n  name: string;\n};\n\nexport async function getSession(\n  provider: InjectedWindowProvider,\n): Promise<Session> {\n  if (!provider) {\n    throw new Error('No provider');\n  }\n\n  const { dAppEncryptionKeyUri, challenge, sessionId } =\n    await getSessionValues();\n  const dAppName = 'CertifiedProof';\n\n  const session = await provider.startSession(\n    dAppName,\n    dAppEncryptionKeyUri,\n    challenge,\n  );\n\n  const { encryptionKeyUri, encryptedChallenge, nonce } = session;\n  await checkSession(\n    {\n      encryptionKeyUri,\n      encryptedChallenge,\n      nonce,\n    },\n    sessionId,\n  );\n\n  const { name } = provider;\n\n  return { ...session, sessionId, name };\n}\n","/**\n * Convert caught exception to an instance of Error.\n * Typescript makes it very explicit that in the catch clause the caught exception can be of any type:\n * https://devblogs.microsoft.com/typescript/announcing-typescript-4-4/#use-unknown-catch-variables\n * */\nexport function exceptionToError(exception: unknown): Error {\n  return exception instanceof Error ? exception : new Error(String(exception));\n}\n","import type { ICType } from '@kiltprotocol/sdk-js';\n\nexport const emailCType: ICType = {\n  $schema: 'http://kilt-protocol.org/draft-01/ctype#',\n  title: 'Email',\n  properties: {\n    Email: {\n      type: 'string',\n    },\n  },\n  type: 'object',\n  $id: 'kilt:ctype:0x3291bb126e33b4862d421bfaa1d2f272e6cdfc4f96658988fbcffea8914bd9ac',\n};\n","import type { ICType } from '@kiltprotocol/sdk-js';\n\nimport { emailCType } from '../cTypes/emailCType';\nimport { twitterCType } from '../cTypes/twitterCType';\nimport { idCType } from '../cTypes/idCType';\n\nexport const supportedCTypeKeys = ['email', 'twitter', 'id'] as const;\n\nexport type SupportedCType = (typeof supportedCTypeKeys)[number];\n\nexport const supportedCTypes: Record<SupportedCType, ICType> = {\n  email: emailCType,\n  twitter: twitterCType,\n  id: idCType,\n};\n\nexport const kiltCost: Record<SupportedCType, number> = {\n  id: 2,\n  email: 2,\n  twitter: 3,\n};\n\nexport function isSupportedCType(cType: string): cType is SupportedCType {\n  return supportedCTypeKeys.includes(cType as SupportedCType);\n}\n","import type { ICType } from '@kiltprotocol/sdk-js';\n\nexport const twitterCType: ICType = {\n  $schema: 'http://kilt-protocol.org/draft-01/ctype#',\n  title: 'Twitter',\n  properties: {\n    Twitter: {\n      type: 'string',\n    },\n  },\n  type: 'object',\n  $id: 'kilt:ctype:0x47d04c42bdf7fdd3fc5a194bcaa367b2f4766a6b16ae3df628927656d818f420',\n};\n","import type { ICType } from '@kiltprotocol/sdk-js';\n\nexport const idCType: ICType = {\n  $schema: 'http://kilt-protocol.org/draft-01/ctype#',\n  properties: {\n    age: {\n      type: 'integer',\n    },\n    name: {\n      type: 'string',\n    },\n  },\n  title: 'INE ID',\n  type: 'object',\n  $id: 'kilt:ctype:0x3112e1e3fb387e5eb6c109aa45afc7ed9df01f1c90a976a8b00585abf817ca82',\n};\n"],"names":["$aaGF3","parcelRequire","$aLBVI","async","$0b936765a3d53457$export$9d2d13571c4b0e72","default","get","$3hLxt","paths","session","json","$0b936765a3d53457$export$542d0bdbdb619c3d","sessionId","headers","post","$ceb38cfa37fceaad$export$21346160286a1076","window","$ceb38cfa37fceaad$export$d1c4c32603236117","Object","entries","kilt","filter","provider","specVersion","startsWith","map","name","$ceb38cfa37fceaad$export$12151e9ef3722552","Error","dAppEncryptionKeyUri","challenge","startSession","encryptionKeyUri","encryptedChallenge","nonce","$38a995ad7b107b8c$export$f49a3d3b897fcb75","exception","String","$bcaf953137b24f95$export$91ef7ca1f29d536d","$bcaf953137b24f95$export$fceeab0910ee116e","email","$schema","title","properties","Email","type","$id","twitter","Twitter","id","age","$bcaf953137b24f95$export$721e075907bcb4ad","$bcaf953137b24f95$export$2fe3928a85bcbe3a","cType","includes","$f101ff59aba5a445$var$errors","closed","jsx","unauthorized","jsxs","href","target","rel","unknown","$f101ff59aba5a445$var$Connect","onConnect","extensions","setExtensions","$jQ7Zu","useState","processing","setProcessing","error","setError","useEffect","handler","dispatchEvent","CustomEvent","addEventListener","removeEventListener","handleConnect","useCallback","extension","undefined","message","console","length","className","onClick","$f101ff59aba5a445$var$Claim","$l4VFs","useParams","flowId","setFlowId","setSession","status","setStatus","setTimeout","button","document","querySelector","__flowId","handleClaim","event","preventDefault","claimContents","fromEntries","FormData","currentTarget","listen","requestAttestation","terms","send","message1","handlePayment","pay","log","Fragment","clientid","onSubmit","keys","property","disabled","required","Link","to","$5jKHo","home","$f101ff59aba5a445$var$Home","generatePath","claim","$5a1fP","createRoot","render","BrowserRouter","Routes","Route","path","element"],"version":3,"file":"index.711e427e.js.map"}