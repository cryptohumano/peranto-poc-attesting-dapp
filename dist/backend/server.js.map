{"mappings":"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","sources":["src/backend/utilities/configuration.ts","src/backend/utilities/keypairs.ts","src/backend/utilities/initKilt.ts","src/backend/utilities/didDocument.ts","src/backend/utilities/logger.ts","src/backend/utilities/auth.ts","src/backend/endpoints/paths.ts","src/backend/utilities/credentialStorage.ts","src/backend/utilities/cryptoCallbacks.ts","src/backend/utilities/attest.ts","src/backend/utilities/revoke.ts","src/backend/endpoints/admin/credentials.ts","src/backend/routers/admin.ts","src/backend/endpoints/user/sessionHeader.ts","src/backend/utilities/sessionStorage.ts","src/backend/endpoints/user/pay.ts","src/backend/cTypes/emailCType.ts","src/backend/utilities/supportedCTypes.ts","src/backend/cTypes/twitterCType.ts","src/backend/cTypes/idCType.ts","src/backend/endpoints/user/requestAttestation.ts","src/backend/endpoints/user/session.ts","src/backend/utilities/encryptMessage.ts","src/backend/endpoints/user/terms.ts","src/backend/endpoints/user/metamap.ts","src/backend/routers/user.ts","src/backend/server.ts"],"sourcesContent":["import { cwd } from 'node:process';\nimport path from 'node:path';\n\nimport { config } from 'dotenv';\nimport { pino } from 'pino';\nimport { DidUri } from '@kiltprotocol/sdk-js';\n\nconfig();\n\nclass ConfigurationError extends Error {\n  constructor(message: string) {\n    super(message);\n    pino().fatal(message);\n    process.exit(1);\n  }\n}\n\nconst { env } = process;\n\nconst baseUri = env.URL;\nif (!baseUri) {\n  throw new ConfigurationError('URL is not provided');\n}\n\nconst did = env.DID as DidUri;\n\nconst payerMnemonic = env.SECRET_PAYER_MNEMONIC;\nif (!payerMnemonic) {\n  throw new ConfigurationError('SECRET_PAYER_MNEMONIC is not provided');\n}\nconst authenticationMnemonic = env.SECRET_AUTHENTICATION_MNEMONIC;\nif (!authenticationMnemonic) {\n  throw new ConfigurationError(\n    'SECRET_AUTHENTICATION_MNEMONIC is not provided',\n  );\n}\nconst assertionMethodMnemonic = env.SECRET_ASSERTION_METHOD_MNEMONIC;\nif (!assertionMethodMnemonic) {\n  throw new ConfigurationError(\n    'SECRET_ASSERTION_METHOD_MNEMONIC is not provided',\n  );\n}\nconst keyAgreementMnemonic = env.SECRET_KEY_AGREEMENT_MNEMONIC;\nif (!keyAgreementMnemonic) {\n  throw new ConfigurationError('SECRET_KEY_AGREEMENT_MNEMONIC is not provided');\n}\n\nconst blockchainEndpoint = env.BLOCKCHAIN_ENDPOINT;\nif (!blockchainEndpoint) {\n  throw new ConfigurationError('No blockchain endpoint provided');\n}\n\nconst adminUsername = env.ADMIN_USERNAME;\nconst adminPassword = env.ADMIN_PASSWORD;\nif (!adminUsername || !adminPassword) {\n  throw new ConfigurationError('Admin credentials missing');\n}\n\nexport const configuration = {\n  port: parseInt(env.PORT as string) || 3000,\n  blockchainEndpoint,\n  baseUri,\n  distFolder: path.join(cwd(), 'dist', 'frontend'),\n  did,\n  payerMnemonic,\n  authenticationMnemonic,\n  assertionMethodMnemonic,\n  keyAgreementMnemonic,\n  adminUsername,\n  adminPassword,\n};\n","import { Utils } from '@kiltprotocol/sdk-js';\nimport { cryptoWaitReady } from '@polkadot/util-crypto';\n\nimport { configuration } from './configuration';\n\nexport const keypairsPromise = (async () => {\n  await cryptoWaitReady();\n\n  const payer = Utils.Crypto.makeKeypairFromUri(configuration.payerMnemonic);\n\n  const authentication = Utils.Crypto.makeKeypairFromUri(\n    configuration.authenticationMnemonic,\n  );\n\n  const assertionMethod = Utils.Crypto.makeKeypairFromUri(\n    configuration.assertionMethodMnemonic,\n  );\n\n  const keyAgreement = Utils.Crypto.makeEncryptionKeypairFromSeed(\n    Utils.Crypto.mnemonicToMiniSecret(configuration.keyAgreementMnemonic),\n  );\n\n  return {\n    payer,\n    authentication,\n    assertionMethod,\n    keyAgreement,\n  };\n})();\n","import { connect } from '@kiltprotocol/sdk-js';\n\nimport { configuration } from './configuration';\n\nexport async function initKilt(): Promise<void> {\n  await connect(configuration.blockchainEndpoint);\n}\n","import type { DidDocument, KeyRelationship } from '@kiltprotocol/sdk-js';\nimport { Did, Utils } from '@kiltprotocol/sdk-js';\n\nimport { keypairsPromise } from './keypairs';\nimport { configuration } from './configuration';\nimport { initKilt } from './initKilt';\n\nasync function compareKeys(\n  configured: { publicKey: Uint8Array },\n  resolved: { publicKey: Uint8Array } | undefined,\n  relationship: KeyRelationship,\n): Promise<void> {\n  if (!resolved) {\n    throw new Error(\n      `Your on-chain DID is broken: the resolved key for ${relationship} is undefined`,\n    );\n  }\n\n  const derivedHex = Utils.Crypto.u8aToHex(configured.publicKey);\n  const resolvedHex = Utils.Crypto.u8aToHex(resolved.publicKey);\n\n  if (derivedHex !== resolvedHex) {\n    throw new Error(\n      `Your on-chain DID is broken: the configured key for ${relationship} does not match resolved one`,\n    );\n  }\n}\n\nasync function compareAllKeys(fullDid: DidDocument): Promise<void> {\n  const keypairs = await keypairsPromise;\n\n  await compareKeys(\n    keypairs.authentication,\n    fullDid.authentication[0],\n    'authentication',\n  );\n  await compareKeys(\n    keypairs.assertionMethod,\n    fullDid.assertionMethod?.[0],\n    'assertionMethod',\n  );\n  await compareKeys(\n    keypairs.keyAgreement,\n    fullDid.keyAgreement?.[0],\n    'keyAgreement',\n  );\n}\n\nexport const didDocumentPromise = (async () => {\n  await initKilt();\n\n  const { did } = configuration;\n  if (!did) {\n    throw new Error('DID not configured, have you run createDID script?');\n  }\n\n  const resolved = await Did.resolve(did);\n  if (!resolved || !resolved.document) {\n    throw new Error(\n      `Could not resolve the configured DID ${did}, have you run createDID script?`,\n    );\n  }\n\n  const { document } = resolved;\n  await compareAllKeys(document);\n\n  const authenticationKey = document.authentication?.[0];\n  if (!authenticationKey) {\n    throw new Error('Impossible: authentication key not found');\n  }\n\n  const assertionMethodKey = document.assertionMethod?.[0];\n  if (!assertionMethodKey) {\n    throw new Error('Impossible: assertion method key not found');\n  }\n\n  const keyAgreementKey = document.keyAgreement?.[0];\n  if (!keyAgreementKey) {\n    throw new Error('Impossible: key agreement key not found');\n  }\n\n  return {\n    did,\n    didDocument: document,\n    authenticationKey,\n    assertionMethodKey,\n    keyAgreementKey,\n  };\n})();\n","import { pino } from 'pino';\nimport pretty from 'pino-pretty';\n\nconst stream = pretty({\n  levelFirst: true,\n  colorize: true,\n  ignore: 'time,hostname,pid',\n});\n\nexport const logger = pino(\n  {\n    level: 'trace',\n  },\n  stream,\n);\n","import basicAuth from 'express-basic-auth';\nimport { configuration } from './configuration';\n\nconst { adminUsername, adminPassword } = configuration;\n\nexport const auth = basicAuth({\n  users: { [adminUsername]: adminPassword },\n  challenge: true,\n});\n","export const paths = {\n  session: '/api/session',\n  terms: '/api/terms',\n  requestAttestation: '/api/request-attestation',\n  pay: '/api/pay',\n\n  // admin\n  credentials: {\n    list: '/api/credentials',\n    item: '/api/credentials/:id',\n    attest: '/api/credentials/:id/attest',\n    revoke: '/api/credentials/:id/revoke',\n  },\n};\n","import { randomUUID } from 'node:crypto';\n\nimport { IAttestation, ICredential } from '@kiltprotocol/sdk-js';\n\nexport class NotFoundError extends Error {}\n\nexport interface Credential {\n  claim: ICredential;\n  attestation?: IAttestation;\n}\n\n// Maps are used for example purposes. A real database should be used in production.\nconst credentials: Map<string, Credential> = new Map();\n\nexport function addClaim(claim: ICredential) {\n  const id = randomUUID();\n  credentials.set(id, { claim });\n}\n\nexport function listCredentials() {\n  return Object.fromEntries(credentials.entries());\n}\n\nexport function getCredential(id: string) {\n  const credential = credentials.get(id);\n  if (!credential) {\n    throw new NotFoundError('Credential not found');\n  }\n  return credential;\n}\n\nexport function deleteCredential(id: string) {\n  const deleted = credentials.delete(id);\n  if (!deleted) {\n    throw new NotFoundError('Credential not found');\n  }\n}\n\nexport function addAttestation(id: string, attestation: IAttestation) {\n  const credential = getCredential(id);\n  credentials.set(id, { ...credential, attestation });\n  return getCredential(id);\n}\n","import {\n  DecryptCallback,\n  DidResourceUri,\n  EncryptCallback,\n  SignRequestData,\n  Utils,\n} from '@kiltprotocol/sdk-js';\n\nimport { keypairsPromise } from './keypairs';\nimport { didDocumentPromise } from './didDocument';\n\nexport async function sign({ data, keyRelationship }: SignRequestData) {\n  if (keyRelationship === 'capabilityDelegation') {\n    throw new Error('Delegation not supported');\n  }\n  const { authentication, assertionMethod } = await keypairsPromise;\n  const { did, authenticationKey, assertionMethodKey } =\n    await didDocumentPromise;\n\n  const [keypair, publicKey] =\n    keyRelationship === 'authentication'\n      ? [authentication, authenticationKey]\n      : [assertionMethod, assertionMethodKey];\n\n  const keyUri: DidResourceUri = `${did}${publicKey.id}`;\n\n  return {\n    signature: keypair.sign(data, { withType: false }),\n    keyType: keypair.type,\n    keyUri,\n  };\n}\n\nexport async function signWithAssertionMethod({ data }: { data: Uint8Array }) {\n  const { assertionMethod } = await keypairsPromise;\n\n  const { did, assertionMethodKey } = await didDocumentPromise;\n  const keyUri: DidResourceUri = `${did}${assertionMethodKey.id}`;\n\n  return {\n    signature: assertionMethod.sign(data, { withType: false }),\n    keyType: assertionMethod.type,\n    keyUri,\n  };\n}\n\nexport async function encrypt({\n  data,\n  peerPublicKey,\n}: Parameters<EncryptCallback>[0]) {\n  const { keyAgreement } = await keypairsPromise;\n\n  const { did, keyAgreementKey } = await didDocumentPromise;\n  const keyUri: DidResourceUri = `${did}${keyAgreementKey.id}`;\n\n  const { box, nonce } = Utils.Crypto.encryptAsymmetric(\n    data,\n    peerPublicKey,\n    keyAgreement.secretKey,\n  );\n\n  return {\n    data: box,\n    nonce,\n    keyUri,\n  };\n}\n\nexport async function decrypt({\n  data: box,\n  nonce,\n  peerPublicKey,\n}: Parameters<DecryptCallback>[0]) {\n  const { keyAgreement } = await keypairsPromise;\n\n  const data = Utils.Crypto.decryptAsymmetric(\n    { box, nonce },\n    peerPublicKey,\n    keyAgreement.secretKey,\n  );\n  if (!data) {\n    throw new Error('Failed to decrypt with given key');\n  }\n\n  return {\n    data,\n  };\n}\n","import {\n  Attestation,\n  Blockchain,\n  ConfigService,\n  Did,\n  IAttestation,\n  ICredential,\n} from '@kiltprotocol/sdk-js';\nimport { configuration } from './configuration';\nimport { sign } from './cryptoCallbacks';\nimport { keypairsPromise } from './keypairs';\n\nexport async function attest(credential: ICredential): Promise<IAttestation> {\n  const api = ConfigService.get('api');\n\n  const attestation = Attestation.fromCredentialAndDid(\n    credential,\n    configuration.did,\n  );\n\n  const { claimHash, cTypeHash } = attestation;\n\n  const { payer } = await keypairsPromise;\n\n  const tx = api.tx.attestation.add(claimHash, cTypeHash, null);\n  const authorized = await Did.authorizeTx(\n    configuration.did,\n    tx,\n    sign,\n    payer.address,\n  );\n\n  await Blockchain.signAndSubmitTx(authorized, payer);\n\n  return attestation;\n}\n","import {\n  Attestation,\n  Blockchain,\n  ConfigService,\n  Did,\n  ICredential,\n} from '@kiltprotocol/sdk-js';\nimport { configuration } from './configuration';\nimport { sign } from './cryptoCallbacks';\nimport { keypairsPromise } from './keypairs';\n\nexport async function revoke(credential: ICredential) {\n  const api = ConfigService.get('api');\n  const { rootHash } = credential;\n\n  const tx = api.tx.attestation.revoke(rootHash, null);\n\n  const { payer } = await keypairsPromise;\n\n  const authorized = await Did.authorizeTx(\n    configuration.did,\n    tx,\n    sign,\n    payer.address,\n  );\n\n  await Blockchain.signAndSubmitTx(authorized, payer);\n\n  const attestation = await api.query.attestation.attestations(rootHash);\n\n  return Attestation.fromChain(attestation, rootHash);\n}\n","import { Response, Router } from 'express';\n\nimport { paths } from '../paths';\nimport {\n  NotFoundError,\n  deleteCredential,\n  getCredential,\n  listCredentials,\n  addAttestation,\n} from '../../utilities/credentialStorage';\nimport { StatusCodes } from 'http-status-codes';\nimport { logger } from '../../utilities/logger';\nimport { attest } from '../../utilities/attest';\nimport { revoke } from '../../utilities/revoke';\n\nfunction sendErrorResponse(error: unknown, response: Response) {\n  logger.error(error);\n  if (error instanceof NotFoundError) {\n    response.status(StatusCodes.NOT_FOUND).send(error);\n  } else {\n    response.status(StatusCodes.INTERNAL_SERVER_ERROR).send(error);\n  }\n}\n\nexport const credentials = Router();\n\ncredentials.get(paths.credentials.list, async (request, response) => {\n  logger.debug('Getting list of credentials');\n  response.send(listCredentials());\n});\n\ncredentials.get(paths.credentials.item, async (request, response) => {\n  try {\n    const { id } = request.params;\n    logger.debug(`Getting credential`);\n    response.send(getCredential(id));\n  } catch (error) {\n    sendErrorResponse(error, response);\n  }\n});\n\ncredentials.delete(paths.credentials.item, async (request, response) => {\n  try {\n    const { id } = request.params;\n    logger.debug('Deleting credential');\n\n    deleteCredential(id);\n\n    response.sendStatus(StatusCodes.OK);\n  } catch (error) {\n    sendErrorResponse(error, response);\n  }\n});\n\ncredentials.post(paths.credentials.attest, async (request, response) => {\n  try {\n    const { id } = request.params;\n\n    logger.debug(`Getting credential`);\n    const { claim } = getCredential(id);\n\n    logger.debug('Attesting credential');\n    const attestation = await attest(claim);\n\n    logger.debug('Credential attested, updating database');\n    const attestedCredential = addAttestation(id, attestation);\n\n    response.send(attestedCredential);\n  } catch (error) {\n    sendErrorResponse(error, response);\n  }\n});\n\ncredentials.post(paths.credentials.revoke, async (request, response) => {\n  try {\n    const { id } = request.params;\n\n    logger.debug('Getting credential');\n    const { claim } = getCredential(id);\n\n    logger.debug('Revoking credential');\n    const attestation = await revoke(claim);\n\n    logger.debug('Credential revoked, updating database');\n    const revokedCredential = addAttestation(id, attestation);\n\n    response.send(revokedCredential);\n  } catch (error) {\n    sendErrorResponse(error, response);\n  }\n});\n","import express, { Router } from 'express';\nimport { configuration } from '../utilities/configuration';\n\nimport { credentials } from '../endpoints/admin/credentials';\n\nexport const adminRouter = Router();\n\nadminRouter.use(credentials);\n\nadminRouter.use(\n  // eslint-disable-next-line import/no-named-as-default-member\n  express.static(`${configuration.distFolder}/admin`, {\n    dotfiles: 'allow',\n    setHeaders(res) {\n      res.set('Access-Control-Allow-Origin', '*');\n    },\n  }),\n);\n\nadminRouter.get('*', (request, response) => {\n  response.sendFile(`${configuration.distFolder}/admin/index.html`);\n});\n","export const sessionHeader = 'x-session-id';\n","import { NextFunction, Request, Response } from 'express';\nimport { StatusCodes } from 'http-status-codes';\nimport NodeCache from 'node-cache';\nimport { DidResourceUri, DidUri, ICredential } from '@kiltprotocol/sdk-js';\n\nimport { sessionHeader } from '../endpoints/user/sessionHeader';\n\nexport interface BasicSession {\n  sessionId: string;\n  did?: DidUri;\n  encryptionKeyUri?: DidResourceUri;\n  didChallenge?: string;\n  didConfirmed?: boolean;\n  credential?: ICredential;\n}\n\nexport type Session = BasicSession & {\n  did: DidUri;\n  encryptionKeyUri: DidResourceUri;\n};\n\nconst sessionStorage = new NodeCache({ stdTTL: 5 * 60 * 60, useClones: false });\n\nfunction getSessionById(sessionId: string): BasicSession {\n  const session = sessionStorage.get(sessionId);\n  if (!session) {\n    throw new Error(`Unknown or expired session ${sessionId}`);\n  }\n  return session as BasicSession;\n}\n\nfunction getBasicSession(request: Request): BasicSession {\n  const sessionId = request.get(sessionHeader);\n\n  if (!sessionId) {\n    throw new Error(`Required header ${sessionHeader} is missing`);\n  }\n\n  return getSessionById(sessionId);\n}\n\nfunction getSession(request: Request): Session {\n  const session = getBasicSession(request);\n\n  const { did, didConfirmed, encryptionKeyUri } = session;\n  if (!did || !didConfirmed || !encryptionKeyUri) {\n    throw new Error('Unconfirmed DID');\n  }\n\n  return { ...session, did, encryptionKeyUri };\n}\n\nexport function setSession(session: BasicSession): void {\n  sessionStorage.set(session.sessionId, session);\n}\n\nexport function basicSessionMiddleware(\n  request: Request,\n  response: Response,\n  next: NextFunction,\n): void {\n  try {\n    const session = getBasicSession(request);\n    (request as Request & { session: BasicSession }).session = session;\n    next();\n  } catch (error) {\n    response.status(StatusCodes.FORBIDDEN).send(error);\n  }\n}\n\nexport function sessionMiddleware(\n  request: Request,\n  response: Response,\n  next: NextFunction,\n): void {\n  try {\n    const session = getSession(request);\n    (request as Request & { session: Session }).session = session;\n    next();\n  } catch (error) {\n    response.status(StatusCodes.FORBIDDEN).send(error);\n  }\n}\n","import { Request, Response, Router } from 'express';\nimport { StatusCodes } from 'http-status-codes';\nimport { logger } from '../../utilities/logger';\nimport { Session, sessionMiddleware } from '../../utilities/sessionStorage';\nimport { paths } from '../paths';\nimport { addClaim } from '../../utilities/credentialStorage';\n\nasync function handler(request: Request, response: Response): Promise<void> {\n  // implement your payment logic here\n\n  try {\n    logger.debug('Mock processing payment');\n\n    const {\n      session: { credential },\n    } = request as Request & { session: Session };\n\n    if (!credential) {\n      throw new Error('Session credential not found');\n    }\n\n    addClaim(credential);\n\n    logger.debug('Payment received, sent credential to attester');\n    response.sendStatus(StatusCodes.NO_CONTENT);\n  } catch (error) {\n    logger.error(error);\n    response.status(StatusCodes.INTERNAL_SERVER_ERROR).send(error);\n  }\n}\n\nexport const pay = Router();\n\npay.post(paths.pay, sessionMiddleware, handler);\n","import type { ICType } from '@kiltprotocol/sdk-js';\n\nexport const emailCType: ICType = {\n  $schema: 'http://kilt-protocol.org/draft-01/ctype#',\n  title: 'Email',\n  properties: {\n    Email: {\n      type: 'string',\n    },\n  },\n  type: 'object',\n  $id: 'kilt:ctype:0x3291bb126e33b4862d421bfaa1d2f272e6cdfc4f96658988fbcffea8914bd9ac',\n};\n","import type { ICType } from '@kiltprotocol/sdk-js';\n\nimport { emailCType } from '../cTypes/emailCType';\nimport { twitterCType } from '../cTypes/twitterCType';\nimport { idCType } from '../cTypes/idCType';\n\nexport const supportedCTypeKeys = ['email', 'twitter', 'id'] as const;\n\nexport type SupportedCType = (typeof supportedCTypeKeys)[number];\n\nexport const supportedCTypes: Record<SupportedCType, ICType> = {\n  email: emailCType,\n  twitter: twitterCType,\n  id: idCType,\n};\n\nexport const kiltCost: Record<SupportedCType, number> = {\n  id: 2,\n  email: 2,\n  twitter: 3,\n};\n\nexport function isSupportedCType(cType: string): cType is SupportedCType {\n  return supportedCTypeKeys.includes(cType as SupportedCType);\n}\n","import type { ICType } from '@kiltprotocol/sdk-js';\n\nexport const twitterCType: ICType = {\n  $schema: 'http://kilt-protocol.org/draft-01/ctype#',\n  title: 'Twitter',\n  properties: {\n    Twitter: {\n      type: 'string',\n    },\n  },\n  type: 'object',\n  $id: 'kilt:ctype:0x47d04c42bdf7fdd3fc5a194bcaa367b2f4766a6b16ae3df628927656d818f420',\n};\n","import type { ICType } from '@kiltprotocol/sdk-js';\n\nexport const idCType: ICType = {\n  $schema: 'http://kilt-protocol.org/draft-01/ctype#',\n  properties: {\n    age: {\n      type: 'integer',\n    },\n    name: {\n      type: 'string',\n    },\n  },\n  title: 'INE ID',\n  type: 'object',\n  $id: 'kilt:ctype:0x3112e1e3fb387e5eb6c109aa45afc7ed9df01f1c90a976a8b00585abf817ca82',\n};\n","import { Credential, CType, Message, Quote } from '@kiltprotocol/sdk-js';\nimport { Request, Response, Router } from 'express';\nimport { StatusCodes } from 'http-status-codes';\nimport { decrypt } from '../../utilities/cryptoCallbacks';\nimport { logger } from '../../utilities/logger';\nimport {\n  Session,\n  sessionMiddleware,\n  setSession,\n} from '../../utilities/sessionStorage';\nimport { supportedCTypes } from '../../utilities/supportedCTypes';\nimport { paths } from '../paths';\n\nasync function handler(request: Request, response: Response): Promise<void> {\n  try {\n    logger.debug('Handling attestation request');\n\n    const message = await Message.decrypt(request.body, decrypt);\n    const messageBody = message.body;\n    logger.debug('Request attestation message decrypted');\n\n    Message.verifyMessageBody(messageBody);\n    const { type } = messageBody;\n\n    if (type === 'reject' || type === 'reject-terms') {\n      response.status(StatusCodes.CONFLICT).send('Message contains rejection');\n      return;\n    }\n\n    if (type !== 'request-attestation') {\n      throw new Error('Unexpected message type');\n    }\n\n    const { quote, credential } = messageBody.content;\n\n    if (quote) {\n      await Quote.verifyQuoteAgreement(quote);\n      logger.debug('Quote agreement verified');\n    }\n\n    const cTypes = Object.values(supportedCTypes);\n    const cTypeId = CType.hashToId(credential.claim.cTypeHash);\n    const ctype = cTypes.find(({ $id }) => $id === cTypeId);\n    if (!ctype) {\n      response.status(StatusCodes.FORBIDDEN).send('Unsupported CType');\n    }\n    logger.debug('CType supported');\n\n    await Credential.verifyWellFormed(credential, { ctype });\n    logger.debug('Credential data structure verified');\n\n    const { session } = request as Request & { session: Session };\n    setSession({ ...session, credential });\n\n    logger.debug('Request attestation complete');\n    response.sendStatus(StatusCodes.NO_CONTENT);\n  } catch (error) {\n    response.status(StatusCodes.INTERNAL_SERVER_ERROR).send(error);\n  }\n}\n\nexport const requestAttestation = Router();\n\nrequestAttestation.post(paths.requestAttestation, sessionMiddleware, handler);\n","import { Request, Response, Router } from 'express';\nimport { StatusCodes } from 'http-status-codes';\n\nimport { Did, DidResourceUri, Utils } from '@kiltprotocol/sdk-js';\nimport { randomAsHex } from '@polkadot/util-crypto';\n\nimport { didDocumentPromise } from '../../utilities/didDocument';\nimport { decrypt } from '../../utilities/cryptoCallbacks';\nimport {\n  BasicSession,\n  basicSessionMiddleware,\n  setSession,\n} from '../../utilities/sessionStorage';\nimport { logger } from '../../utilities/logger';\n\nimport { paths } from '../paths';\n\nexport interface CheckSessionInput {\n  encryptionKeyUri: DidResourceUri;\n  encryptedChallenge: string;\n  nonce: string;\n}\n\nasync function handler(request: Request, response: Response): Promise<void> {\n  try {\n    logger.debug('Session confirmation started');\n\n    const payload = request.body as CheckSessionInput;\n    const { encryptionKeyUri, encryptedChallenge, nonce } = payload;\n    const { session } = request as Request & { session: BasicSession };\n\n    const encryptionKey = await Did.resolveKey(encryptionKeyUri);\n\n    logger.debug('Session confirmation resolved DID encryption key');\n\n    const { keyAgreementKey, did } = await didDocumentPromise;\n\n    const { data } = await decrypt({\n      data: Utils.Crypto.coToUInt8(encryptedChallenge),\n      nonce: Utils.Crypto.coToUInt8(nonce),\n      keyUri: `${did}${keyAgreementKey.id}`,\n      peerPublicKey: encryptionKey.publicKey,\n    });\n    logger.debug('Session confirmation decrypted challenge');\n\n    const decryptedChallenge = Utils.Crypto.u8aToHex(data);\n    const originalChallenge = session.didChallenge;\n\n    if (decryptedChallenge !== originalChallenge) {\n      response\n        .status(StatusCodes.FORBIDDEN)\n        .send('Challenge signature mismatch');\n      return;\n    }\n\n    setSession({\n      ...session,\n      did: encryptionKey.controller,\n      encryptionKeyUri,\n      didConfirmed: true,\n    });\n\n    logger.debug('Challenge confirmation matches');\n    response.sendStatus(StatusCodes.NO_CONTENT);\n  } catch (error) {\n    response.status(StatusCodes.INTERNAL_SERVER_ERROR).send(error);\n  }\n}\n\nfunction startSession() {\n  const sessionId = randomAsHex(24);\n  const challenge = randomAsHex(24);\n\n  setSession({ sessionId, didChallenge: challenge });\n\n  return {\n    challenge,\n    sessionId,\n  };\n}\n\nexport interface GetSessionOutput {\n  dAppEncryptionKeyUri: DidResourceUri;\n  sessionId: string;\n  challenge: string;\n}\n\nconst path = paths.session;\n\nexport const session = Router();\n\nsession.get(path, async (request, response) => {\n  const { did, keyAgreementKey } = await didDocumentPromise;\n  const dAppEncryptionKeyUri: DidResourceUri = `${did}${keyAgreementKey.id}`;\n  response.send({\n    dAppEncryptionKeyUri,\n    ...startSession(),\n  } as GetSessionOutput);\n});\n\nsession.post(path, basicSessionMiddleware, handler);\n","import type {\n  DidResourceUri,\n  IEncryptedMessage,\n  MessageBody,\n} from '@kiltprotocol/sdk-js';\nimport { Did, Message } from '@kiltprotocol/sdk-js';\n\nimport { encrypt } from './cryptoCallbacks';\nimport { configuration } from './configuration';\n\nexport async function encryptMessageBody(\n  encryptionKeyUri: DidResourceUri,\n  messageBody: MessageBody,\n): Promise<IEncryptedMessage> {\n  const { did } = Did.parse(encryptionKeyUri);\n\n  const message = Message.fromBody(messageBody, configuration.did, did);\n  return Message.encrypt(message, encrypt, encryptionKeyUri);\n}\n","import { Claim, IClaimContents, IQuote, Quote } from '@kiltprotocol/sdk-js';\nimport { Request, Response, Router } from 'express';\nimport { StatusCodes } from 'http-status-codes';\nimport { configuration } from '../../utilities/configuration';\nimport { sign } from '../../utilities/cryptoCallbacks';\nimport { encryptMessageBody } from '../../utilities/encryptMessage';\nimport { logger } from '../../utilities/logger';\nimport { Session, sessionMiddleware } from '../../utilities/sessionStorage';\nimport {\n  kiltCost,\n  SupportedCType,\n  supportedCTypes,\n} from '../../utilities/supportedCTypes';\nimport { paths } from '../paths';\n\nconst TTL = 5 * 60 * 60 * 1000;\nconst TERMS = 'https://example.com/terms-and-conditions';\n\ninterface Input {\n  type: SupportedCType;\n  claimContents: IClaimContents;\n}\n\nasync function handler(request: Request, response: Response): Promise<void> {\n  try {\n    logger.debug('Submit terms started');\n    const { session } = request as Request & { session: Session };\n    const { encryptionKeyUri } = session;\n\n    const { type, claimContents } = request.body as Input;\n\n    const claim = Claim.fromCTypeAndClaimContents(\n      supportedCTypes[type],\n      claimContents,\n      session.did,\n    );\n    logger.debug('Generated claim');\n\n    const quote: IQuote = {\n      attesterDid: configuration.did,\n      cTypeHash: claim.cTypeHash,\n      cost: { tax: { VAT: 0 }, net: kiltCost[type], gross: kiltCost[type] },\n      currency: 'KILT',\n      timeframe: new Date(Date.now() + TTL).toISOString(),\n      termsAndConditions: TERMS,\n    };\n\n    const signedQuote = await Quote.createAttesterSignedQuote(quote, sign);\n    logger.debug('Signed quote');\n\n    const output = await encryptMessageBody(encryptionKeyUri, {\n      content: {\n        claim,\n        legitimations: [],\n        quote: signedQuote,\n        cTypes: [supportedCTypes[type]],\n      },\n      type: 'submit-terms',\n    });\n    logger.debug('Submit terms complete');\n    response.send(output);\n  } catch (error) {\n    response.status(StatusCodes.INTERNAL_SERVER_ERROR).send(error);\n  }\n}\nexport const terms = Router();\n\nterms.post(paths.terms, sessionMiddleware, handler);\n","/* eslint-disable import/no-extraneous-dependencies */\nimport { Request, Response, Router } from 'express';\nimport { StatusCodes } from 'http-status-codes';\nimport { initializeApp, getApps } from 'firebase/app';\n\nimport { getFirestore, doc, setDoc } from 'firebase/firestore';\n\nimport { logger } from '../../utilities/logger';\n\nconst firebaseConfig = {\n  apiKey: 'AIzaSyAAwR5GvEUi3lLWy9bb1tz65jhvHI3vufc',\n  authDomain: 'peranto-test.firebaseapp.com',\n  projectId: 'peranto-test',\n  storageBucket: 'peranto-test.appspot.com',\n  messagingSenderId: '777447831295',\n  appId: '1:777447831295:web:6a987d7c8b307ecef43eca',\n};\n\nconst apps = getApps();\n\nexport const firebase =\n  apps.length > 0 ? apps[0] : initializeApp(firebaseConfig);\n\nexport const firestore = getFirestore(firebase);\n\n// WH SECRET oEI07pv3tHbQ1069H61r35C0K\nasync function handler(req: Request, res: Response): Promise<void> {\n  try {\n    const { eventName } = req.body;\n\n    const docRef = await setDoc(\n      doc(firestore, 'metamap', 'testId_' + eventName),\n      {\n        payload: JSON.stringify({\n          computed: {\n            age: {\n              data: 30,\n            },\n          },\n          documents: [\n            {\n              country: 'MX',\n              merchantFields: [],\n              region: null,\n              type: 'national-id',\n              subtype: 'credencial-para-votar',\n              steps: [\n                {\n                  status: 200,\n                  id: 'age-check',\n                  cacheHit: null,\n                  data: {\n                    age: 30,\n                    ageThreshold: 18,\n                    underage: false,\n                  },\n                  error: null,\n                },\n                {\n                  status: 200,\n                  id: 'alteration-detection',\n                  cacheHit: null,\n                  error: null,\n                },\n                {\n                  status: 200,\n                  id: 'facematch',\n                  cacheHit: null,\n                  data: {\n                    score: 100,\n                  },\n                  error: null,\n                },\n                {\n                  status: 200,\n                  id: 'template-matching',\n                  cacheHit: null,\n                  error: null,\n                },\n                {\n                  status: 200,\n                  id: 'document-reading',\n                  cacheHit: null,\n                  data: {\n                    fullName: {\n                      value: 'EDGAR DANIEL SALINAS LEDESMA',\n                      required: true,\n                      label: 'Name',\n                    },\n                    address: {\n                      value:\n                        'AV MARINA NACIONAL 200 EDIF 1 A 74 U HAB MARINA NACIONAL 11320 MIGUEL HIDALGO, CDMX.',\n                      required: false,\n                      label: 'Address',\n                    },\n                    emissionDate: {\n                      value: '2017-01-01',\n                      required: false,\n                      label: 'Emission Date',\n                      format: 'date',\n                    },\n                    documentNumber: {\n                      value: '163631998',\n                      required: true,\n                      label: 'Document Number',\n                    },\n                    dateOfBirth: {\n                      value: '1992-07-18',\n                      required: true,\n                      label: 'Day of Birth',\n                      format: 'date',\n                    },\n                    expirationDate: {\n                      value: '2027-12-31',\n                      required: false,\n                      label: 'Date of Expiration',\n                      format: 'date',\n                    },\n                    documentType: {\n                      value: 'ID',\n                      required: false,\n                      label: 'Document Type',\n                    },\n                    firstName: {\n                      value: 'EDGAR DANIEL',\n                      required: false,\n                      label: 'First Name',\n                    },\n                    issueCountry: {\n                      value: 'MEX',\n                      required: false,\n                      label: 'Issue Country',\n                    },\n                    nationality: {\n                      value: 'MEX',\n                      required: false,\n                      label: 'Nationality',\n                    },\n                    sex: {\n                      value: 'M',\n                      required: false,\n                      label: 'Sex',\n                    },\n                    surname: {\n                      value: 'SALINAS LEDESMA',\n                      required: false,\n                      label: 'Surname',\n                    },\n                    cde: {\n                      value: 'SLLDED92071809H000',\n                      required: false,\n                      label: 'Elector Key',\n                    },\n                    curp: {\n                      value: 'SALE920718HDFLDD08',\n                      required: false,\n                      label: 'CURP',\n                    },\n                    ne: {\n                      value: '01',\n                      required: false,\n                      label: 'Emission Number',\n                    },\n                    ocrNumber: {\n                      value: '5182086432677',\n                      required: false,\n                      label: 'OCR Number',\n                    },\n                  },\n                  error: null,\n                },\n              ],\n              fields: {\n                address: {\n                  value:\n                    'AV MARINA NACIONAL 200 EDIF 1 A 74 U HAB MARINA NACIONAL 11320 MIGUEL HIDALGO, CDMX.',\n                },\n                cde: {\n                  value: 'SLLDED92071809H000',\n                },\n                curp: {\n                  value: 'SALE920718HDFLDD08',\n                },\n                dateOfBirth: {\n                  value: '1992-07-18',\n                },\n                documentNumber: {\n                  value: '163631998',\n                },\n                documentType: {\n                  value: 'ID',\n                },\n                emissionDate: {\n                  value: '2017-01-01',\n                },\n                expirationDate: {\n                  value: '2027-12-31',\n                },\n                firstName: {\n                  value: 'EDGAR DANIEL',\n                },\n                fullName: {\n                  value: 'EDGAR DANIEL SALINAS LEDESMA',\n                },\n                issueCountry: {\n                  value: 'MEX',\n                },\n                nationality: {\n                  value: 'MEX',\n                },\n                ne: {\n                  value: '01',\n                },\n                ocrNumber: {\n                  value: '5182086432677',\n                },\n                sex: {\n                  value: 'M',\n                },\n                surname: {\n                  value: 'SALINAS LEDESMA',\n                },\n              },\n              photos: [\n                'https://media.getmati.com/file?location=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmaWxlTmFtZSI6ImQwNmM2YWI0LTM2YmYtNDdkOC04NzE3LWQ0Y2NlNDRmNDU5ZC5qcGVnIiwiZm9sZGVyIjoiZG9jdW1lbnQiLCJpYXQiOjE2ODgzNDAyMTMsImV4cCI6MTY4ODQyNjYxMywiYXVkIjoiZWFjMTYwZmYtYTBlNS00M2QxLWFkNTktNTIwMjI1YmQ3OWI4In0.2mkLDqtZfGz8XcraYd1PoZnoYkkwUrPxXCvmYehQHxY',\n                'https://media.getmati.com/file?location=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmaWxlTmFtZSI6ImNlYzdlNjE4LTVkMmMtNDcxNi05MWM4LWUxYTAyM2RiMWNiNC5qcGVnIiwiZm9sZGVyIjoiZG9jdW1lbnQiLCJpYXQiOjE2ODgzNDAyMTMsImV4cCI6MTY4ODQyNjYxMywiYXVkIjoiZWFjMTYwZmYtYTBlNS00M2QxLWFkNTktNTIwMjI1YmQ3OWI4In0.aXVYcsK0D6VqfIeiTsRqZd2R_53G-sk7SD-SxB5Oq3g',\n              ],\n            },\n          ],\n          expired: false,\n          flow: {\n            id: '64811ce44d683b001b9013ef',\n            name: 'Default flow',\n          },\n          identity: {\n            id: '64a0f46f43bd9d001b7a2778',\n            status: 'verified',\n          },\n          steps: [\n            {\n              status: 200,\n              id: 'liveness',\n              cacheHit: null,\n              data: {\n                videoUrl:\n                  'https://media.getmati.com/file?location=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmaWxlTmFtZSI6Ijk2YTA0NTBlLWQzZGUtNGNjYS05MGFkLTQ5NGZiMjc4MGUwNy5ta3YiLCJmb2xkZXIiOiJ2aWRlbyIsImlhdCI6MTY4ODM0MDIxMywiZXhwIjoxNjg4NDI2NjEzLCJhdWQiOiJlYWMxNjBmZi1hMGU1LTQzZDEtYWQ1OS01MjAyMjViZDc5YjgifQ.TEQNks36DielBu29ThmFnColNqFYYwMWeehoaY-mTVk',\n                spriteUrl:\n                  'https://media.getmati.com/file?location=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmaWxlTmFtZSI6IjEzOWMxNjhkLWY1MTUtNGEwNS04NWFjLTQ4ZjRjYmQ1MDI5Mi5qcGVnIiwiZm9sZGVyIjoic2VsZmllIiwiaWF0IjoxNjg4MzQwMjEzLCJleHAiOjE2ODg0MjY2MTMsImF1ZCI6ImVhYzE2MGZmLWEwZTUtNDNkMS1hZDU5LTUyMDIyNWJkNzliOCJ9.1qEptKVwj9lUI3P9trJXWy7HRpIA_nBpbXrlNwNPnoY',\n                selfieUrl:\n                  'https://media.getmati.com/file?location=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmaWxlTmFtZSI6IjM5YWYwYzAzLTVlZWYtNDM5ZC1iZDNkLWI0N2RkZDlhYjg0MC5qcGVnIiwiZm9sZGVyIjoic2VsZmllIiwiaWF0IjoxNjg4MzQwMjEzLCJleHAiOjE2ODg0MjY2MTMsImF1ZCI6ImVhYzE2MGZmLWEwZTUtNDNkMS1hZDU5LTUyMDIyNWJkNzliOCJ9.wjiXYcGF13To2E4IqZL5u0MKLhkBwNdGhxy9VEzylD8',\n              },\n              error: null,\n            },\n          ],\n          masJobToBePostpone: false,\n          profileId: 'MX|NATIONAL-ID|163631998',\n          id: '64a0f46f43bd9d001b7a277a',\n          deviceFingerprint: {\n            ua: 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36',\n            browser: {\n              name: 'Chrome',\n              version: '114.0.0.0',\n              major: '114',\n            },\n            engine: {\n              name: 'Blink',\n              version: '114.0.0.0',\n            },\n            os: {\n              name: 'Mac OS',\n              version: '10.15.7',\n            },\n            app: {\n              platform: 'web_desktop',\n              version: '22.3.5',\n            },\n            ip: '187.191.38.141',\n            vpnDetectionEnabled: false,\n          },\n          hasProblem: false,\n        }),\n      },\n    );\n\n    res.json({\n      docRef,\n    });\n  } catch (error) {\n    logger.error(error);\n\n    res.status(StatusCodes.INTERNAL_SERVER_ERROR).send(error);\n  }\n}\n\nexport const metamap = Router();\n\nmetamap.post('/api/metamap', handler);\n","import express, { Router } from 'express';\n\nimport { pay } from '../endpoints/user/pay';\nimport { requestAttestation } from '../endpoints/user/requestAttestation';\nimport { session } from '../endpoints/user/session';\nimport { terms } from '../endpoints/user/terms';\nimport { metamap } from '../endpoints/user/metamap';\n\nimport { configuration } from '../utilities/configuration';\n\nexport const userRouter = Router();\n\nuserRouter.use(session);\nuserRouter.use(terms);\nuserRouter.use(requestAttestation);\nuserRouter.use(pay);\nuserRouter.use(metamap);\n\nuserRouter.use(\n  // eslint-disable-next-line import/no-named-as-default-member\n  express.static(`${configuration.distFolder}/user`, {\n    dotfiles: 'allow',\n    setHeaders(res) {\n      res.set('Access-Control-Allow-Origin', '*');\n    },\n  }),\n);\n\nuserRouter.get('*', (request, response) => {\n  response.sendFile(`${configuration.distFolder}/user/index.html`);\n});\n","import express from 'express';\nimport bodyParser from 'body-parser';\n\nimport { didDocumentPromise } from './utilities/didDocument';\nimport { configuration } from './utilities/configuration';\nimport { logger } from './utilities/logger';\n\nimport { auth } from './utilities/auth';\nimport { adminRouter } from './routers/admin';\nimport { userRouter } from './routers/user';\n\nconst initApp = async () => {\n  await didDocumentPromise;\n  logger.info('Blockchain connection initialized');\n\n  const app = express();\n  app.use(bodyParser.json());\n\n  app.use('/admin', auth, adminRouter);\n  app.use('/', userRouter);\n\n  logger.info('Routes configured');\n\n  const host = '0.0.0.0';\n  const { port, baseUri } = configuration;\n  const started = app.listen(port, host, () =>\n    logger.info(`Listening on ${baseUri} (host: ${host}, port: ${port})`),\n  );\n\n  function stop() {\n    started.close();\n    process.exit(1);\n  }\n\n  process.on('unhandledRejection', stop);\n  process.on('uncaughtException', stop);\n\n  return app;\n};\n\nexport default initApp();\n"],"names":["$8li2e$config","$9a5082739595bce3$var$ConfigurationError","Error","constructor","message","super","$8li2e$pino","fatal","process","exit","env","$9a5082739595bce3$var$env","$9a5082739595bce3$var$baseUri","URL","$9a5082739595bce3$var$did","DID","$9a5082739595bce3$var$payerMnemonic","SECRET_PAYER_MNEMONIC","$9a5082739595bce3$var$authenticationMnemonic","SECRET_AUTHENTICATION_MNEMONIC","$9a5082739595bce3$var$assertionMethodMnemonic","SECRET_ASSERTION_METHOD_MNEMONIC","$9a5082739595bce3$var$keyAgreementMnemonic","SECRET_KEY_AGREEMENT_MNEMONIC","$9a5082739595bce3$var$blockchainEndpoint","BLOCKCHAIN_ENDPOINT","$9a5082739595bce3$var$adminUsername","ADMIN_USERNAME","$9a5082739595bce3$var$adminPassword","ADMIN_PASSWORD","$9a5082739595bce3$export$1670bf621bbc68f3","port","parseInt","PORT","distFolder","$8li2e$nodepath","join","$8li2e$cwd","$1749a0affe1e2fac$export$c289742f0747afa3","$8li2e$cryptoWaitReady","$8li2e$Utils","Crypto","makeKeypairFromUri","payerMnemonic","authenticationMnemonic","assertionMethodMnemonic","makeEncryptionKeypairFromSeed","mnemonicToMiniSecret","keyAgreementMnemonic","async","$d5e46af1030fd1ba$export$de423f52c8ea922","$8li2e$connect","blockchainEndpoint","$7e0b7c48c43039ee$var$compareKeys","configured","resolved","relationship","u8aToHex","publicKey","$7e0b7c48c43039ee$export$b8c12ba93511ecc0","did","$8li2e$Did","resolve","document","fullDid","keypairs","authentication","assertionMethod","keyAgreement","$7e0b7c48c43039ee$var$compareAllKeys","authenticationKey","assertionMethodKey","keyAgreementKey","didDocument","$15a6ac0367590b47$var$stream","$8li2e$pinopretty","levelFirst","colorize","ignore","$15a6ac0367590b47$export$af88d00dbe7f521","level","adminUsername","$b3dd54d8f90dbc1c$var$adminUsername","adminPassword","$b3dd54d8f90dbc1c$var$adminPassword","$b3dd54d8f90dbc1c$export$73693bad9f5880b0","$8li2e$expressbasicauth","users","challenge","$8b8135ac0a872448$export$595447059867920","session","terms","requestAttestation","pay","credentials","list","item","attest","revoke","$18cddce23ffb0b39$export$78c95b58762d2106","$18cddce23ffb0b39$var$credentials","Map","$18cddce23ffb0b39$export$fa223408cdeea5e5","claim","id","$8li2e$randomUUID","set","$18cddce23ffb0b39$export$298c59008c641b3e","credential","get","$18cddce23ffb0b39$export$663b6344735d0e78","delete","$18cddce23ffb0b39$export$a2813f6973ed113","attestation","$d04bc697e1db4f68$export$c5552dfdbc7cec71","data","keyRelationship","keypair","keyUri","signature","sign","withType","keyType","type","$d04bc697e1db4f68$export$5b0f6292f11d1d18","peerPublicKey","box","nonce","encryptAsymmetric","secretKey","$d04bc697e1db4f68$export$e85a0c9a1067c5d3","decryptAsymmetric","$ceb6527163e88ac4$export$994159fc52341244","api","$8li2e$ConfigService","$8li2e$Attestation","fromCredentialAndDid","claimHash","cTypeHash","payer","tx","add","authorized","authorizeTx","address","$8li2e$Blockchain","signAndSubmitTx","$7d9c09f48e3eea26$export$573f8dbbf6fbef75","rootHash","query","attestations","fromChain","$3a47d82b8ed8e023$var$sendErrorResponse","error","response","status","$8li2e$StatusCodes","NOT_FOUND","send","INTERNAL_SERVER_ERROR","$3a47d82b8ed8e023$export$78896651422bbf9e","$8li2e$Router","request","debug","Object","fromEntries","entries","params","sendStatus","OK","post","attestedCredential","revokedCredential","$8dcf704c811bb6ca$export$e73631d91f945400","use","$8li2e$express","static","dotfiles","setHeaders","res","sendFile","$cdebb7d266d5529a$var$sessionStorage","$8li2e$nodecache","stdTTL","useClones","$cdebb7d266d5529a$var$getBasicSession","sessionId","$cdebb7d266d5529a$var$getSessionById","$cdebb7d266d5529a$export$b94982631f8f9752","$cdebb7d266d5529a$export$f484ee341a6e9f8f","next","didConfirmed","encryptionKeyUri","$cdebb7d266d5529a$var$getSession","FORBIDDEN","$fa40543f7f9825c4$export$552d83b9289531dc","NO_CONTENT","$a0a27930e77ba031$export$fceeab0910ee116e","email","$schema","title","properties","Email","$id","twitter","Twitter","age","name","$a0a27930e77ba031$export$721e075907bcb4ad","$544f4c7c8812f4a4$export$ddf46a4b5b1c2865","$a2666dc51342e5ad$var$startSession","$8li2e$randomAsHex","didChallenge","messageBody","$8li2e$Message","decrypt","body","verifyMessageBody","CONFLICT","quote","content","$8li2e$Quote","verifyQuoteAgreement","cTypes","values","cTypeId","$8li2e$CType","hashToId","ctype","find","$8li2e$Credential","verifyWellFormed","$a2666dc51342e5ad$var$path","$a2666dc51342e5ad$export$55427e926be628d4","$d6888dba0634184a$export$5a3d317611b281f5","parse","fromBody","encrypt","dAppEncryptionKeyUri","payload","encryptedChallenge","encryptionKey","resolveKey","coToUInt8","decryptedChallenge","controller","$9956318176747e0e$export$8a21ba990ca4a7cb","claimContents","$8li2e$Claim","fromCTypeAndClaimContents","attesterDid","cost","tax","VAT","net","gross","currency","timeframe","Date","now","toISOString","termsAndConditions","signedQuote","createAttesterSignedQuote","output","legitimations","$b7af080fd6b507cf$var$apps","$8li2e$getApps","$b7af080fd6b507cf$export$e0cb15fb3b8fc489","$8li2e$getFirestore","length","$8li2e$initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","$b7af080fd6b507cf$export$c0a6f289af0b5f31","req","eventName","docRef","$8li2e$setDoc","$8li2e$doc","JSON","stringify","computed","documents","country","merchantFields","region","subtype","steps","cacheHit","ageThreshold","underage","score","fullName","value","required","label","emissionDate","format","documentNumber","dateOfBirth","expirationDate","documentType","firstName","issueCountry","nationality","sex","surname","cde","curp","ne","ocrNumber","fields","photos","expired","flow","identity","videoUrl","spriteUrl","selfieUrl","masJobToBePostpone","profileId","deviceFingerprint","ua","browser","version","major","engine","os","app","platform","ip","vpnDetectionEnabled","hasProblem","json","$9e4614c218229bd5$export$7bb46b7223ebd883","info","$8li2e$bodyparser","host","baseUri","started","listen","stop","close","on","$2dbda6e7de11ca31$var$initApp"],"version":3,"file":"server.js.map","sourceRoot":"../../"}