{"mappings":"mVAOAA,IAEA,MAAMC,UAA2BC,MAC/BC,YAAYC,GACVC,MAAMD,GACNE,IAAOC,MAAMH,GACbI,QAAQC,KAAK,IAIjB,MAAMC,IAAEC,GAAQH,QAEVI,EAAUD,EAAIE,IACpB,IAAKD,EACH,MAAM,IAAIX,EAAmB,uBAG/B,MAAMa,EAAMH,EAAII,IAEVC,EAAgBL,EAAIM,sBAC1B,IAAKD,EACH,MAAM,IAAIf,EAAmB,yCAE/B,MAAMiB,EAAyBP,EAAIQ,+BACnC,IAAKD,EACH,MAAM,IAAIjB,EACR,kDAGJ,MAAMmB,EAA0BT,EAAIU,iCACpC,IAAKD,EACH,MAAM,IAAInB,EACR,oDAGJ,MAAMqB,EAAuBX,EAAIY,8BACjC,IAAKD,EACH,MAAM,IAAIrB,EAAmB,iDAG/B,MAAMuB,EAAqBb,EAAIc,oBAC/B,IAAKD,EACH,MAAM,IAAIvB,EAAmB,mCAG/B,MAAMyB,EAAgBf,EAAIgB,eACpBC,EAAgBjB,EAAIkB,eAC1B,IAAKH,IAAkBE,EACrB,MAAM,IAAI3B,EAAmB,6BAGxB,MAAM6B,EAAgB,CAC3BC,KAAMC,SAASrB,EAAIsB,OAAmB,uBACtCT,UACAZ,EACAsB,WAAYC,EAAKC,KAAKC,IAAO,OAAQ,gBACrCvB,gBACAE,yBACAE,0BACAE,uBACAE,gBACAI,gBACAE,GCjEKU,eAAeC,UACdC,EAAQV,EAAcW,oBCAvB,MAAMC,EAAmB,iBACxBC,IAgBN,MAAO,OAdOC,EAAMC,OAAOC,mBAAmBhB,EAAciB,8BAErCH,EAAMC,OAAOC,mBAClChB,EAAckB,wCAGQJ,EAAMC,OAAOC,mBACnChB,EAAcmB,sCAGKL,EAAMC,OAAOK,8BAChCN,EAAMC,OAAOM,qBAAqBrB,EAAcsB,yBAdpB,GCF1BC,EAASC,EAAO,CACpBC,YAAY,EACZC,UAAU,EACVC,OAAQ,sBAGGC,EAASpD,EACpB,CACEqD,MAAO,SAETN,GCAD,WAGC,SAFMd,IAEFT,EAAc8B,IAChB,MAAM,IAAI1D,MACR,OAAO4B,EAAc8B,wCAAwC9B,EAAcW,sBAI/E,MAAMoB,gBAAEA,EAAeC,eAAEA,EAAcC,MAAEA,EAAKC,aAAEA,SACxCtB,EAEFuB,EAAMC,EAAcC,IAAI,OAExBC,SADiBH,EAAII,MAAMC,OAAOC,QAAQR,EAAMS,UAChCC,KAAKL,KAC3B,GAAIA,EAAKM,GAAGC,EAAaC,YAAY,KAAM,CACzC,MAAMC,EAAWF,EAAaG,kBAAkBV,GAChD,MAAM,IAAIlE,MACR,qBAAqB6D,EAAMS,kCAAkCK,KAIjE,MAAME,QAAWC,EAAIC,WACnB,CACEnB,eAAgB,CAACA,GACjBD,gBAAiB,CAACA,GAClBG,aAAc,CAACA,IAEjBD,EAAMS,SACNlC,OAAOmC,KAAEA,MAAY,CACnBS,UAAWpB,EAAeqB,KAAKV,EAAM,CAAEW,UAAU,IACjDC,QAASvB,EAAewB,SAI5B5B,EAAO6B,KAAK,4CACNC,EAAWC,gBAAgBV,EAAIhB,GAErC,MAAMH,EAAMoB,EAAIU,qBAAqB5B,GACrCJ,EAAO6B,KAAK,8BAA8B3B,WAEpC+B,KAzCP","sources":["src/backend/utilities/configuration.ts","src/backend/utilities/initKilt.ts","src/backend/utilities/keypairs.ts","src/backend/utilities/logger.ts","src/backend/createDID.ts"],"sourcesContent":["import { cwd } from 'node:process';\nimport path from 'node:path';\n\nimport { config } from 'dotenv';\nimport { pino } from 'pino';\nimport { DidUri } from '@kiltprotocol/sdk-js';\n\nconfig();\n\nclass ConfigurationError extends Error {\n  constructor(message: string) {\n    super(message);\n    pino().fatal(message);\n    process.exit(1);\n  }\n}\n\nconst { env } = process;\n\nconst baseUri = env.URL;\nif (!baseUri) {\n  throw new ConfigurationError('URL is not provided');\n}\n\nconst did = env.DID as DidUri;\n\nconst payerMnemonic = env.SECRET_PAYER_MNEMONIC;\nif (!payerMnemonic) {\n  throw new ConfigurationError('SECRET_PAYER_MNEMONIC is not provided');\n}\nconst authenticationMnemonic = env.SECRET_AUTHENTICATION_MNEMONIC;\nif (!authenticationMnemonic) {\n  throw new ConfigurationError(\n    'SECRET_AUTHENTICATION_MNEMONIC is not provided',\n  );\n}\nconst assertionMethodMnemonic = env.SECRET_ASSERTION_METHOD_MNEMONIC;\nif (!assertionMethodMnemonic) {\n  throw new ConfigurationError(\n    'SECRET_ASSERTION_METHOD_MNEMONIC is not provided',\n  );\n}\nconst keyAgreementMnemonic = env.SECRET_KEY_AGREEMENT_MNEMONIC;\nif (!keyAgreementMnemonic) {\n  throw new ConfigurationError('SECRET_KEY_AGREEMENT_MNEMONIC is not provided');\n}\n\nconst blockchainEndpoint = env.BLOCKCHAIN_ENDPOINT;\nif (!blockchainEndpoint) {\n  throw new ConfigurationError('No blockchain endpoint provided');\n}\n\nconst adminUsername = env.ADMIN_USERNAME;\nconst adminPassword = env.ADMIN_PASSWORD;\nif (!adminUsername || !adminPassword) {\n  throw new ConfigurationError('Admin credentials missing');\n}\n\nexport const configuration = {\n  port: parseInt(env.PORT as string) || 3000,\n  blockchainEndpoint,\n  baseUri,\n  distFolder: path.join(cwd(), 'dist', 'frontend'),\n  did,\n  payerMnemonic,\n  authenticationMnemonic,\n  assertionMethodMnemonic,\n  keyAgreementMnemonic,\n  adminUsername,\n  adminPassword,\n};\n","import { connect } from '@kiltprotocol/sdk-js';\n\nimport { configuration } from './configuration';\n\nexport async function initKilt(): Promise<void> {\n  await connect(configuration.blockchainEndpoint);\n}\n","import { Utils } from '@kiltprotocol/sdk-js';\nimport { cryptoWaitReady } from '@polkadot/util-crypto';\n\nimport { configuration } from './configuration';\n\nexport const keypairsPromise = (async () => {\n  await cryptoWaitReady();\n\n  const payer = Utils.Crypto.makeKeypairFromUri(configuration.payerMnemonic);\n\n  const authentication = Utils.Crypto.makeKeypairFromUri(\n    configuration.authenticationMnemonic,\n  );\n\n  const assertionMethod = Utils.Crypto.makeKeypairFromUri(\n    configuration.assertionMethodMnemonic,\n  );\n\n  const keyAgreement = Utils.Crypto.makeEncryptionKeypairFromSeed(\n    Utils.Crypto.mnemonicToMiniSecret(configuration.keyAgreementMnemonic),\n  );\n\n  return {\n    payer,\n    authentication,\n    assertionMethod,\n    keyAgreement,\n  };\n})();\n","import { pino } from 'pino';\nimport pretty from 'pino-pretty';\n\nconst stream = pretty({\n  levelFirst: true,\n  colorize: true,\n  ignore: 'time,hostname,pid',\n});\n\nexport const logger = pino(\n  {\n    level: 'trace',\n  },\n  stream,\n);\n","import {\n  BalanceUtils,\n  Blockchain,\n  ConfigService,\n  Did,\n  disconnect,\n} from '@kiltprotocol/sdk-js';\n\nimport { configuration } from './utilities/configuration';\nimport { initKilt } from './utilities/initKilt';\nimport { keypairsPromise } from './utilities/keypairs';\nimport { logger } from './utilities/logger';\n\n(async () => {\n  await initKilt();\n\n  if (configuration.did) {\n    throw new Error(\n      `DID ${configuration.did} already exists on the blockchain ${configuration.blockchainEndpoint}`,\n    );\n  }\n\n  const { assertionMethod, authentication, payer, keyAgreement } =\n    await keypairsPromise;\n\n  const api = ConfigService.get('api');\n  const balances = await api.query.system.account(payer.address);\n  const free = balances.data.free;\n  if (free.lt(BalanceUtils.toFemtoKilt(10))) {\n    const freeText = BalanceUtils.formatKiltBalance(free);\n    throw new Error(\n      `The payer account ${payer.address} has insufficient funds ${freeText}`,\n    );\n  }\n\n  const tx = await Did.getStoreTx(\n    {\n      authentication: [authentication],\n      assertionMethod: [assertionMethod],\n      keyAgreement: [keyAgreement],\n    },\n    payer.address,\n    async ({ data }) => ({\n      signature: authentication.sign(data, { withType: false }),\n      keyType: authentication.type,\n    }),\n  );\n\n  logger.warn(`Storing the DID on the blockchainâ€¦`);\n  await Blockchain.signAndSubmitTx(tx, payer);\n\n  const did = Did.getFullDidUriFromKey(authentication);\n  logger.warn(`Add this to your .env: DID=${did}`);\n\n  await disconnect();\n})();\n"],"names":["$kNPNw$config","$9a5082739595bce3$var$ConfigurationError","Error","constructor","message","super","$kNPNw$pino","fatal","process","exit","env","$9a5082739595bce3$var$env","$9a5082739595bce3$var$baseUri","URL","$9a5082739595bce3$var$did","DID","$9a5082739595bce3$var$payerMnemonic","SECRET_PAYER_MNEMONIC","$9a5082739595bce3$var$authenticationMnemonic","SECRET_AUTHENTICATION_MNEMONIC","$9a5082739595bce3$var$assertionMethodMnemonic","SECRET_ASSERTION_METHOD_MNEMONIC","$9a5082739595bce3$var$keyAgreementMnemonic","SECRET_KEY_AGREEMENT_MNEMONIC","$9a5082739595bce3$var$blockchainEndpoint","BLOCKCHAIN_ENDPOINT","$9a5082739595bce3$var$adminUsername","ADMIN_USERNAME","$9a5082739595bce3$var$adminPassword","ADMIN_PASSWORD","$9a5082739595bce3$export$1670bf621bbc68f3","port","parseInt","PORT","distFolder","$kNPNw$nodepath","join","$kNPNw$cwd","async","$d5e46af1030fd1ba$export$de423f52c8ea922","$kNPNw$connect","blockchainEndpoint","$1749a0affe1e2fac$export$c289742f0747afa3","$kNPNw$cryptoWaitReady","$kNPNw$Utils","Crypto","makeKeypairFromUri","payerMnemonic","authenticationMnemonic","assertionMethodMnemonic","makeEncryptionKeypairFromSeed","mnemonicToMiniSecret","keyAgreementMnemonic","$15a6ac0367590b47$var$stream","$kNPNw$pinopretty","levelFirst","colorize","ignore","$15a6ac0367590b47$export$af88d00dbe7f521","level","did","assertionMethod","authentication","payer","keyAgreement","api","$kNPNw$ConfigService","get","free","query","system","account","address","data","lt","$kNPNw$BalanceUtils","toFemtoKilt","freeText","formatKiltBalance","tx","$kNPNw$Did","getStoreTx","signature","sign","withType","keyType","type","warn","$kNPNw$Blockchain","signAndSubmitTx","getFullDidUriFromKey","$kNPNw$disconnect"],"version":3,"file":"createDID.js.map","sourceRoot":"../../"}